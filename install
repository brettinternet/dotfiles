#!/usr/bin/env bash

set -e

CONFIG="base.yml"
DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${BASEDIR}"

if [ ! -f "${BASEDIR}/base/.envrc" ]; then
  cp "${BASEDIR}/base/example.envrc" "${BASEDIR}/base/.envrc"
fi

(cd "${DOTBOT_DIR}" && git submodule update --init --recursive)
echo "Configuring ${CONFIG}"
"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"

UNAME_OUT="$(uname -s)"
case "${UNAME_OUT}" in
    Linux*)     ;;
    Darwin*)    DOTFILE_GROUPS="mac";;
    *)          echo "Unsupported host: ${UNAME_OUT}"
                exit 1;;
esac

if [ -z "$DOTFILE_GROUPS" ]; then
  # Check if VM guest
  # https://unix.stackexchange.com/a/32605
  # if [ grep -q ^flags.*\ hypervisor\ /proc/cpuinfo ]; then
  #   # is vmguest
  #   DOTFILE_GROUPS="${DOTFILE_GROUPS},vmguest"
  # fi

  if [ -f "/etc/arch-release" ]; then
    # is Arch
    DOTFILE_GROUPS="${DOTFILE_GROUPS},archlinux"
  fi

  # Check if laptop with `dmidecode --string chassis-type`
  # https://superuser.com/a/877796
  # if [ -d "/sys/class/power_supply" ]; then
  #   # is laptop
  #   DOTFILE_GROUPS="${DOTFILE_GROUPS},laptop"
  # fi

  if [ xset q &>/dev/null ]; then
    # is running X11
    DOTFILE_GROUPS="${DOTFILE_GROUPS},x11"
  fi
fi

# Optional groups
IFS=', ' read -r -a DOTFILE_ARRAY <<< "$DOTFILE_GROUPS"
for GROUP_EL in "${DOTFILE_ARRAY[@]}"; do
  CONFIG="$GROUP_EL.yml"
  if [ -f "${BASEDIR}/${CONFIG}" ]; then
    echo "Configuring ${CONFIG}"
    "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"
  else
    echo "Cannot find ${CONFIG}"
    exit 1
  fi
done
